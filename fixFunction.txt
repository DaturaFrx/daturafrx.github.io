// Function to extract YouTube video ID from various YouTube URL formats
        function getYouTubeVideoId(url) {
            const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
            const match = url.match(regExp);
            return (match && match[2].length === 11) ? match[2] : false;
        }

        // Load YouTube IFrame API
        function loadYouTubeAPI() {
            return new Promise((resolve) => {
                if (window.YT && window.YT.Player) {
                    resolve();
                } else {
                    window.onYouTubeIframeAPIReady = resolve;
                    const tag = document.createElement('script');
                    tag.src = 'https://www.youtube.com/iframe_api';
                    const firstScriptTag = document.getElementsByTagName('script')[0];
                    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                }
            });
        }

        // Format time in MM:SS
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            seconds = Math.floor(seconds % 60);
            return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        }

        // Function to parse markdown links for audio content
        function parseMarkdownLinks(content) {
            const regex = /\[([^\]]+)\]\(([^)]+)\)/g;
            content = content.replace(/\n/g, '<br>');
            let playerCounter = 0;

            // First, load the YouTube API
            loadYouTubeAPI().then(() => {
                // Initialize all players after API is ready
                document.querySelectorAll('.youtube-audio-player').forEach(container => {
                    const playerId = container.getAttribute('data-player-id');
                    const videoId = container.getAttribute('data-video-id');
                    
                    const player = new YT.Player(`${playerId}-hidden`, {
                        height: '1',
                        width: '1',
                        videoId: videoId,
                        playerVars: {
                            'autoplay': 0,
                            'controls': 0,
                            'playsinline': 1,
                            'rel': 0
                        },
                        events: {
                            'onReady': (event) => {
                                console.log('Player ready');
                                const duration = player.getDuration();
                                document.getElementById(`${playerId}-duration`).textContent = formatTime(duration);
                                
                                const timeSlider = document.getElementById(`${playerId}-time-slider`);
                                timeSlider.max = Math.floor(duration);
                                
                                // Store player instance on the container
                                container.player = player;
                            },
                            'onStateChange': (event) => {
                                console.log('Player state changed:', event.data);
                                const playButton = document.getElementById(`${playerId}-play`);
                                
                                if (event.data === YT.PlayerState.PLAYING) {
                                    playButton.textContent = '❚❚';
                                    
                                    // Start time update interval
                                    if (!container.timeUpdateInterval) {
                                        container.timeUpdateInterval = setInterval(() => {
                                            const currentTime = player.getCurrentTime();
                                            document.getElementById(`${playerId}-current-time`).textContent = formatTime(currentTime);
                                            document.getElementById(`${playerId}-time-slider`).value = currentTime;
                                        }, 1000);
                                    }
                                } else {
                                    playButton.textContent = '▶';
                                    
                                    // Clear time update interval
                                    if (container.timeUpdateInterval) {
                                        clearInterval(container.timeUpdateInterval);
                                        container.timeUpdateInterval = null;
                                    }
                                }
                            }
                        }
                    });
                });
            });
            
            return content.replace(regex, (match, text, url) => {
                // Handle YouTube links
                const youtubeId = getYouTubeVideoId(url);
                if (youtubeId && text.toLowerCase() === 'music') {
                    const playerId = `youtube-audio-${playerCounter++}`;
                    
                    return `
                        <div class="youtube-audio-player" data-player-id="${playerId}" data-video-id="${youtubeId}" style="max-width: 100%; margin: 10px 0;">
                            <div id="${playerId}-hidden"></div>
                            <div class="custom-audio-player" style="
                                background: #FFB6C1;
                                padding: 15px 20px;
                                border-radius: 20px;
                                width: 100%;
                                max-width: 500px;
                                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                            ">
                                <div class="controls-row" style="display: flex; align-items: center; margin-bottom: 10px;">
                                    <button id="${playerId}-play" class="play-button" style="
                                        background: none;
                                        border: none;
                                        font-size: 24px;
                                        cursor: pointer;
                                        padding: 0 10px;
                                        color: #333;
                                    " onclick="
                                        const container = this.closest('.youtube-audio-player');
                                        const player = container.player;
                                        if (player) {
                                            if (player.getPlayerState() === 1) {
                                                player.pauseVideo();
                                            } else {
                                                player.playVideo();
                                            }
                                        }
                                    ">▶</button>
                                    
                                    <span id="${playerId}-current-time" style="margin: 0 10px;">0:00</span>
                                    <span>/</span>
                                    <span id="${playerId}-duration" style="margin: 0 10px;">0:00</span>
                                    
                                    <div class="volume-control" style="display: flex; align-items: center; margin-left: auto;">
                                        <span style="margin-right: 10px;">🔊</span>
                                        <input 
                                            id="${playerId}-volume-slider"
                                            type="range"
                                            min="0"
                                            max="1"
                                            step="0.1"
                                            value="1"
                                            style="width: 80px;"
                                            oninput="
                                                const container = this.closest('.youtube-audio-player');
                                                const player = container.player;
                                                if (player) {
                                                    player.setVolume(this.value * 100);
                                                }
                                            "
                                        >
                                    </div>
                                </div>
                                
                                <div class="time-slider-container" style="width: 100%;">
                                    <input 
                                        id="${playerId}-time-slider"
                                        type="range"
                                        min="0"
                                        max="100"
                                        value="0"
                                        style="width: 100%;"
                                        oninput="
                                            const container = this.closest('.youtube-audio-player');
                                            const player = container.player;
                                            if (player) {
                                                player.seekTo(this.value, true);
                                            }
                                        "
                                    >
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                // Handle regular audio files
                if (text.toLowerCase() === 'music') {
                    return `
                        <div class="audio-container" style="max-width: 100%; margin: 10px 0;">
                            <audio controls>
                                <source src="${url}" type="audio/mpeg">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    `;
                }
                
                // If not audio, return the original markdown link unchanged
                return match;
            });
        }