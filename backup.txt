<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SIGMA BLOG</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Comic+Neue:wght@300;400;700&display=swap');
        
        body {
            font-family: 'Comic Neue', cursive;
            background-color: #ffd1dc;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            color: #6a5acd;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1 {
            text-align: center;
            font-size: 36px;
            text-transform: uppercase;
            letter-spacing: 3px;
            margin-bottom: 30px;
            color: #ff69b4;
            text-shadow: 2px 2px #87cefa;
        }
        .post {
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 0 10px rgba(106, 90, 205, 0.3);
            animation: gentle-float 3s ease-in-out infinite;
        }
        .post-title {
            font-size: 24px;
            margin-bottom: 10px;
            color: #9370db;
        }
        .post-date {
            font-size: 14px;
            margin-bottom: 10px;
            color: #20b2aa;
        }
        .post-content {
            font-size: 16px;
        }
        .rainbow-text {
            background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);
            -webkit-background-clip: text;
            color: transparent;
            animation: rainbow-animation 5s linear infinite;
        }
        @keyframes rainbow-animation {
            to {
                background-position: 200vh;
            }
        }
        @keyframes gentle-float {
            0% { transform: translate(0, 0px); }
            50% { transform: translate(0, 5px); }
            100% { transform: translate(0, -0px); }
        }
        .glitch {
            position: relative;
        }
        .glitch::before,
        .glitch::after {
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        .glitch::before {
            left: 2px;
            text-shadow: -2px 0 #ff00ff;
            clip: rect(44px, 450px, 56px, 0);
            animation: glitch-anim 5s infinite linear alternate-reverse;
        }
        .glitch::after {
            left: -2px;
            text-shadow: -2px 0 #00ffff;
            clip: rect(44px, 450px, 56px, 0);
            animation: glitch-anim 5s infinite linear alternate-reverse;
        }
        @keyframes glitch-anim {
            0% { clip: rect(31px, 9999px, 94px, 0); }
            10% { clip: rect(112px, 9999px, 76px, 0); }
            20% { clip: rect(85px, 9999px, 77px, 0); }
            30% { clip: rect(27px, 9999px, 97px, 0); }
            40% { clip: rect(64px, 9999px, 98px, 0); }
            50% { clip: rect(61px, 9999px, 85px, 0); }
            60% { clip: rect(99px, 9999px, 114px, 0); }
            70% { clip: rect(34px, 9999px, 115px, 0); }
            80% { clip: rect(98px, 9999px, 129px, 0); }
            90% { clip: rect(43px, 9999px, 96px, 0); }
            100% { clip: rect(82px, 9999px, 64px, 0); }
        }

        .menu-button {
            background-color: #ff69b4;
            border: none;
            color: white;
            padding: 5px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 100px;
            position: relative;
            width: 80px;
            text-align: center;
            margin: 20px; 
        }

        .menu-content {
            display: none;
            position: absolute;
            background-color: #ffffff;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;
            min-width: 160px;
            top: 35px;
            left: 0;
            border-radius: 5px;
        }

        .menu-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

        .menu-content a:hover {
            background-color: #ddd;
        }

        .menu-button:hover .menu-content {
            display: block;
        }

        .menu-button:hover {
            background-color: #ff1493;
        }

        .banner {
            background-color: #9370db;
            height: 30px;
            width: 100%;
            position: absolute;
            top: 0;
            left: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            text-shadow: 2px 2px #0000ff;
        }

        .small {
            width: 100px;
            height: auto;
        }

        .arrow {
            position: fixed;
            top: 50%;
            right: 10px;
            font-size: 2rem;
            display: none;
            cursor: pointer;
            z-index: 1000;
        }

        .arrow.show {
            display: block;
        }

        .arrow.up {
            transform: rotate(90deg);
        }

        .arrow.down {
            transform: rotate(-90deg);
        }

        @media (max-width: 768px) {
            .arrow {
                bottom: 10px;
                top: auto;
                left: 50%;
                transform: translateX(-50%);
            }
            .arrow.up, .arrow.down {
                transform: none;
            }
        }

        .loader-container {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
        }
        
        .loader-gif {
            width: 200px;
            height: auto;
        }
        .square {
            width: 100px;
            height: 100px;
            background-color: red;
        }
    </style>
</head>
<body>
    <div class="banner">TUM TUM ACHES ARE THE WORST</div>
    <div class="menu-button">
        Menu
        <div class="menu-content">
            <a href="#" id="menu-posts">Posts - Default ╰(*°▽°*)╯</a>
            <a href="#" id="menu-music">Music (≧∇≦)ﾉ</a>
            <a href="#" id="menu-pictures">Pictures (ง •_•)ง</a>
        </div>
    </div>

    <div class="arrow up" id="upArrow">up</div>
    <div class="arrow down" id="downArrow">down</div>

    <h1 class="rainbow-text">(≧∀≦)ゞ THE SIGMA BLOG O(∩_∩)O</h1>

    <div id="display-container">
        <!-- Content will be displayed here -->
        <div id="posts-container"></div>
    </div>

    <div class="loader-container" id="loader">
        <img src="https://media1.tenor.com/m/DfqGNaq-cisAAAAC/epic-skate-cat.gif" alt="Loading..." class="loader-gif">
    </div>

    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-analytics.js";
        import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-database.js";
    
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBe1NhTQzJYd695UMnmg-xbiM73qbmYBZs",
            authDomain: "blog-c3484.firebaseapp.com",
            projectId: "blog-c3484",
            storageBucket: "blog-c3484.appspot.com",
            messagingSenderId: "352963794904",
            appId: "1:352963794904:web:5637900dfd52f48e6bc4ad",
            measurementId: "G-ZLBCG2SJCH"
        };
    
        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);
        const database = getDatabase(app);

        let currentListener = null;

        function showLoader() {
            const loader = document.getElementById('loader');
            loader.style.display = 'flex';
        }

        function hideLoader() {
            const loader = document.getElementById('loader');
            loader.style.display = 'none';
        }

        function clearScreen() {
            const displayContainer = document.getElementById('display-container');
            displayContainer.innerHTML = '';  // Clears the screen
            
            // Remove existing listener if there is one
            if (currentListener) {
                currentListener();
                currentListener = null;
            }
        }

        // Fetch and display posts
        function fetchAndDisplayPosts() {
            clearScreen();
            showLoader(); // Show loader before fetching data
            
            const postsRef = ref(database, 'posts');
            currentListener = onValue(postsRef, (snapshot) => {
                const data = snapshot.val();
                const displayContainer = document.getElementById('display-container');
                displayContainer.innerHTML = '';
                
                if (data) {
                    for (let key in data) {
                        if (data.hasOwnProperty(key)) {
                            const post = data[key];
                            const postElement = createPostElement(post);
                            displayContainer.appendChild(postElement);
                        }
                    }
                } else {
                    // Handle case when there are no posts
                    displayContainer.innerHTML = '<p>No posts found</p>';
                }
                
                hideLoader(); // Hide loader after posts are displayed
            }, (error) => {
                console.error("Error fetching posts:", error);
                const displayContainer = document.getElementById('display-container');
                displayContainer.innerHTML = '<p>Error loading posts. Please try again later.</p>';
                hideLoader(); // Hide loader if there's an error
            });
        }

        // Fetch and display music
        function fetchAndDisplayMusic() {
            clearScreen();
            showLoader(); // Show loader before fetching data
            
            const musicRef = ref(database, 'music');
            currentListener = onValue(musicRef, (snapshot) => {
                const data = snapshot.val();
                const displayContainer = document.getElementById('display-container');
                displayContainer.innerHTML = '';
                
                if (data) {
                    for (let key in data) {
                        if (data.hasOwnProperty(key)) {
                            const track = data[key];
                            const trackElement = createPostElement(track);
                            displayContainer.appendChild(trackElement);
                        }
                    }
                } else {
                    // Handle case when there is no music
                    displayContainer.innerHTML = '<p>No music tracks found</p>';
                }
                
                hideLoader(); // Hide loader after tracks are displayed
            }, (error) => {
                console.error("Error fetching music:", error);
                const displayContainer = document.getElementById('display-container');
                displayContainer.innerHTML = '<p>Error loading music. Please try again later.</p>';
                hideLoader(); // Hide loader if there's an error
            });
        }

        // Fetch and display pictures
        function fetchAndDisplayPictures() {
            clearScreen();
            showLoader(); // Show loader before fetching data
            
            const picturesRef = ref(database, 'pictures');
            currentListener = onValue(picturesRef, (snapshot) => {
                const data = snapshot.val();
                const displayContainer = document.getElementById('display-container');
                displayContainer.innerHTML = '';
                
                if (data) {
                    for (let key in data) {
                        if (data.hasOwnProperty(key)) {
                            const picture = data[key];
                            const pictureElement = createPostElement(picture);
                            displayContainer.appendChild(pictureElement);
                        }
                    }
                } else {
                    // Handle case when there are no pictures
                    displayContainer.innerHTML = '<p>No pictures found</p>';
                }
                
                hideLoader(); // Hide loader after pictures are displayed
            }, (error) => {
                console.error("Error fetching pictures:", error);
                const displayContainer = document.getElementById('display-container');
                displayContainer.innerHTML = '<p>Error loading pictures. Please try again later.</p>';
                hideLoader(); // Hide loader if there's an error
            });
        }

        // Function to extract YouTube video ID from various YouTube URL formats
        function getYouTubeVideoId(url) {
            const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
            const match = url.match(regExp);
            return (match && match[2].length === 11) ? match[2] : false;
        }

        // Function to parse markdown links with support for images, audio, and YouTube
        function parseMarkdownLinks(content) {
            const regex = /\[([^\]]+)\]\(([^)]+)\)/g;
            content = content.replace(/\n/g, '<br>');
            
            return content.replace(regex, (match, text, url) => {
                // Handle YouTube links
                const youtubeId = getYouTubeVideoId(url);
                if (youtubeId) {
                    const isMusic = text.toLowerCase() === 'music';
                    return `
                        <div class="youtube-container" style="width: 100%; max-width: 800px; margin: 10px auto; aspect-ratio: 16/9;">
                            <iframe
                                width="100%"
                                height="100%"
                                src="https://www.youtube.com/embed/${youtubeId}${isMusic ? '?autoplay=0' : ''}"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowfullscreen
                                style="border-radius: 8px;"
                            ></iframe>
                        </div>
                    `;
                }
                
                // Handle regular audio files
                if (text.toLowerCase() === 'music') {
                    return `
                        <div class="audio-container" style="max-width: 100%; margin: 10px 0;">
                            <audio controls style="width: 100%;">
                                <source src="${url}" type="audio/mpeg">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    `;
                }
                
                // Handle images
                if (url.match(/\.(jpeg|jpg|gif|png|webp)$/i)) {
                    if (text.toLowerCase() === 'crop') {
                        return `
                            <div style="
                                position: relative;
                                width: 50%;
                                max-width: 800px;
                                height: 400px;
                                margin: 0 auto;
                                overflow: hidden;
                                background-color: #f0f0f0;
                            ">
                                <img 
                                    src="${url}" 
                                    alt="${text}" 
                                    style="
                                        position: absolute;
                                        left: 50%;
                                        top: 50%;
                                        transform: translate(-50%, -50%);
                                        width: 100%;
                                        height: 100%;
                                        object-fit: cover;
                                        object-position: center;
                                    "
                                    onload="this.style.width = this.naturalWidth >= this.naturalHeight ? 'auto' : '100%';
                                            this.style.height = this.naturalWidth >= this.naturalHeight ? '100%' : 'auto';
                                            this.style.maxWidth = 'none';
                                            this.style.maxHeight = 'none';"
                                >
                            </div>
                        `;
                    } else {
                        return `
                            <div style="display: flex; justify-content: center; align-items: center;">
                                <img src="${url}" alt="${text}" style="max-width: 100%; height: auto;">
                            </div>
                        `;
                    }
                }
                
                // Default case: regular link
                return `<a href="${url}" target="_blank">${text}</a>`;
            });
        }

        // Function to create post element
        function createPostElement(post) {
            const postElement = document.createElement('div');
            postElement.className = 'post';
            
            const parsedContent = parseMarkdownLinks(post.content);
            
            postElement.innerHTML = `
                <div class="post-title glitch" data-text="${post.title}">${post.title}</div>
                <div class="post-date">${post.date}</div>
                <div class="post-content">${parsedContent}</div>
            `;
            return postElement;
        }

        // Function to handle content display based on hash
        function handleContentDisplay() {
            const hash = window.location.hash || '#posts'; // Default to posts if no hash
            
            switch(hash) {
                case '#music':
                    fetchAndDisplayMusic();
                    break;
                case '#pictures':
                    fetchAndDisplayPictures();
                    break;
                default: // #posts or any other case
                    fetchAndDisplayPosts();
                    break;
            }
        }

        // Menu event listeners
        document.getElementById("menu-posts").addEventListener("click", (e) => {
            e.preventDefault();
            window.location.hash = 'posts';
            fetchAndDisplayPosts();
        });

        document.getElementById("menu-music").addEventListener("click", (e) => {
            e.preventDefault();
            window.location.hash = 'music';
            fetchAndDisplayMusic();
        });

        document.getElementById("menu-pictures").addEventListener("click", (e) => {
            e.preventDefault();
            window.location.hash = 'pictures';
            fetchAndDisplayPictures();
        });

        // Listen for hash changes
        window.addEventListener('hashchange', handleContentDisplay);

        // Initial load - check hash and display appropriate content
        window.addEventListener('load', handleContentDisplay);

        const upArrow = document.getElementById('upArrow');
        const downArrow = document.getElementById('downArrow');

        function updateArrowVisibility() {
            const scrollPosition = window.scrollY;
            const maxScroll = document.documentElement.scrollHeight - window.innerHeight;
            const scrollPercentage = (scrollPosition / maxScroll) * 100;

            // Show up arrow only when user is near bottom (e.g., last 20% of scroll)
            upArrow.classList.toggle('show', scrollPercentage >= 80);
            
            // Show down arrow only when not at bottom
            downArrow.classList.toggle('show', scrollPercentage < 95);
        }

        let upArrowTimeout;
        window.addEventListener('scroll', () => {
            updateArrowVisibility();
            clearTimeout(upArrowTimeout);
            upArrowTimeout = setTimeout(() => {
                upArrow.classList.remove('show');
            }, 2000);
        });

        upArrow.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
        downArrow.addEventListener('click', () => window.scrollTo({ top: document.documentElement.scrollHeight, behavior: 'smooth' }));

        updateArrowVisibility();

        downArrow.classList.add('show');
    </script>
</body>    
</html>